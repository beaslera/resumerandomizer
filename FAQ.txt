Frequently Asked Questions regarding the Resume Randomizer

******************
Question 1) How do I make the resumes look professional, with different fonts, font sizes, italics, images, backgrounds, etc?

Answer 1) The resumes that the program creates are all plain-text files (even though the file ends in .doc).  So they're just letters, spaces, numbers, and symbols.  They don't have any formatting, otherwise they would be "rich text" instead of "plain text."
We know of three approaches to get these random resumes with formatting.  The first approach is to do it all manually, which is theoretically do-able, but would take too long with any reasonable number of resumes.

The second approach (see points 2-4 in the Advanced Use section on "Formatting resumes") is to write the template so that it creates resumes that have the information that another program can use to apply the formatting.  That's what I recommend in both Example 12 (formatting resumes using templates that generate HTML), and in Example 14 (TeX for formatting).  Regardless of what language/approach is used, there's going to have to be an additional step that converts the plain-text resumes generated by the program into rich-text files (pdfs, gifs, Word docs, or whatever).

Personally, I prefer following Example 14, generating resume files that contain TeX commands, and then using pdftex  (https://www.tug.org/applications/pdftex/  though I actually use it as part of MiKTeX http://miktex.org/  )  to turn those resume files into pdfs with all the formatting.  Converting all the resumes just requires running a command like "pdftex *.doc" in the console, once pdftex has been installed correctly.  So the user does not need to manually operate on each resume...but will need to run a batch conversion command once.
The downside of this approach is that if one does not know TeX it can be difficult to learn how to apply formatting (e.g., how to bold a word).  But if you look at the Example 14 template, you can see that formatting can be put directly into the resumes so it's either the same for all resumes (like Leaf 1-1 with the documentclass that sets the 12pt font size) or different for different resumes....hm, looks like I forgot to put that in the example but if there were formatting commands inside a random section, they'd go into the resume randomly like any other random selection.

Similarly, HTML files can be printed/saved to images or pdfs...just search for something like "batch html to pdf" on the internet.  Then follow Example 12 to generate the resumes, and once the resumes are created batch convert them into pdfs or images or some other filetype that shows the formatting.

The third approach is to use the Resume Randomizer just to generate the random texts, and then to use "mail merge" to put those input text snippets into a formatted document.  The mail merge technique has been used for decades to fill form letters with input text, and is supported by most popular word processors, such as Microsoft Word.  We have not tried this approach, but it has been done by others.


******************
Question 2) Can the Resume Randomizer handle other languages?  How do I make resumes that contain text (character sets/encoding) other than US English (e.g., Cyrillic)?

Answer 2) The Resume Randomizer is designed to output the same characters that it is provided in the template and fragment files.  It only requires that its special text "tags" (e.g., *leaf*, *end_leaf*, *random*, %file%, %next%) to be exactly as generated by the HTML-based graphical user interface, and as provided in the example templates.  The key feature that makes the program work for non-ASCII encodings is that all the other text in any leaf gets loaded and then saved to resumes without being interpreted or parsed in any way.  So the program is reading the inputs as ASCII files (even if they are not actually ASCII) and then saving the resume files as ASCII, but because the output characters (actually "code units") are exactly the same as the input characters (again, actually "code units"), the output text will be correct even for non-ASCII encodings.

The provided example template named "example_cyrillic_template.rtf" has been used to generate non-ASCII resumes, indicating that the process does work.

If you run into issues with other languages or character encodings, please let us know and we will investigate the situation further.  Explanation: when non-ASCII multi-unit characters are read as single-units, it may be possible for them to look like one of the special tags and thus generate the wrong output.  If this situation is even a possibility it has a very slim chance, but if it does occur (or you see any unexpected outputs) we will work with you to come up with a solution.

For an overview on the software history of character encodings see http://www.joelonsoftware.com/articles/Unicode.html
And/or for some Python programmatic details see https://docs.python.org/2/howto/unicode.html
